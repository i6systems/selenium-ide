// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export JavaScript Cypress should export a suite 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  
    await driver.get(\\"http://the-internet.herokuapp.com/login\\")
    await driver.manage().window().setRect(1440, 1177)
    await driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\")
    await driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\")
    await driver.findElement(By.css(\\"#login button\\")).click()
    assert(await driver.findElement(By.css(\\".flash.success\\")).getText() == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\")
  
    await driver.get(\\"http://the-internet.herokuapp.com/login\\")
    await driver.manage().window().setRect(1440, 1177)
    await driver.findElement(By.id(\\"username\\")).sendKeys(\\"blah\\")
    await driver.findElement(By.id(\\"password\\")).sendKeys(\\"blah\\")
    await driver.findElement(By.css(\\"#login button\\")).click()
    assert(await driver.findElement(By.id(\\"flash\\")).getText() == \\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\")
}
"
`;

exports[`Code Export JavaScript Cypress should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  
    vars[\\"myVar\\"] = await driver.executeScript(\\"return 'a'\\")
    if (!!await driver.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'a'\\")
    } else if (!!await driver.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'b'\\")
    } else {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'c'\\")
    }
    assert(vars[\\"output\\"].toString() == \\"a\\")
  
    vars[\\"myVar\\"] = await driver.executeScript(\\"return 'b'\\")
    if (!!await driver.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'a'\\")
    } else if (!!await driver.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'b'\\")
    } else {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'c'\\")
    }
    assert(vars[\\"output\\"].toString() == \\"b\\")
  
    vars[\\"myVar\\"] = await driver.executeScript(\\"return 'c'\\")
    if (!!await driver.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'a'\\")
    } else if (!!await driver.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'b'\\")
    } else {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'c'\\")
    }
    assert(vars[\\"output\\"].toString() == \\"c\\")
  
    vars[\\"check\\"] = await driver.executeScript(\\"return 1\\")
    do {
      vars[\\"check\\"] = await driver.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"])
    } while(!!await driver.executeScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"]))
    assert(vars[\\"check\\"].toString() == \\"3\\")
  
    vars[\\"check\\"] = await driver.executeScript(\\"return 1\\")
    const times = 2
    for(let i = 0; i < times; i++) {
      vars[\\"check\\"] = await driver.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"])
    }
    assert(vars[\\"check\\"].toString() == \\"3\\")
  
    vars[\\"check\\"] = await driver.executeScript(\\"return 1\\")
    while(!!await driver.executeScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"])) {
      vars[\\"check\\"] = await driver.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"])
    }
    assert(vars[\\"check\\"].toString() == \\"3\\")
}
"
`;

exports[`Code Export JavaScript Cypress should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  
    await driver.get(\\"https://the-internet.herokuapp.com/\\")
    await driver.findElement(By.linkText(\\"Form Authentication\\")).click()
    await driver.findElement(By.id(\\"username\\")).sendKeys(vars[\\"username\\"])
    await driver.findElement(By.id(\\"password\\")).sendKeys(vars[\\"password\\"])
    await driver.findElement(By.css(\\".fa\\")).click()
  
  
    vars[\\"username\\"] = \\"blah\\"
    vars[\\"password\\"] = \\"blah\\"
    login()
  
    vars[\\"username\\"] = \\"tomsmith\\"
    vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    login()
}
"
`;

exports[`Code Export JavaScript Cypress should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  async function waitForWindow(timeout = 2) {
    await driver.sleep(timeout)
    const handlesThen = vars[\\"windowHandles\\"]
    const handlesNow = await driver.getAllWindowHandles()
    if (handlesNow.length > handlesThen.length) {
      return handlesNow.find(handle => (!handlesThen.includes(handle)))
    }
    throw new Error(\\"New window did not appear before timeout\\")
  }
  
    await driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    vars[\\"windowHandles\\"] = await driver.getAllWindowHandles()
    await driver.findElement(By.linkText(\\"Click Here\\")).click()
    vars[\\"win9425\\"] = await waitForWindow(2000)
    await driver.switchTo().window(vars[\\"win9425\\"])
    assert(await driver.getTitle() == \\"New Window\\")
  
  
    selectwindow()
}
"
`;

exports[`Code Export JavaScript Cypress should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  async function waitForWindow(timeout = 2) {
    await driver.sleep(timeout)
    const handlesThen = vars[\\"windowHandles\\"]
    const handlesNow = await driver.getAllWindowHandles()
    if (handlesNow.length > handlesThen.length) {
      return handlesNow.find(handle => (!handlesThen.includes(handle)))
    }
    throw new Error(\\"New window did not appear before timeout\\")
  }
  
    await driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    vars[\\"windowHandles\\"] = await driver.getAllWindowHandles()
    await driver.findElement(By.linkText(\\"Click Here\\")).click()
    vars[\\"win9425\\"] = await waitForWindow(2000)
    await driver.switchTo().window(vars[\\"win9425\\"])
    assert(await driver.getTitle() == \\"New Window\\")
  
  
    selectwindow()
  
    await driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    vars[\\"windowHandles\\"] = await driver.getAllWindowHandles()
    await driver.findElement(By.linkText(\\"Click Here\\")).click()
    vars[\\"win9425\\"] = await waitForWindow(2000)
    await driver.switchTo().window(vars[\\"win9425\\"])
    assert(await driver.getTitle() == \\"New Window\\")
}
"
`;

exports[`Code Export JavaScript Cypress should export a test 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  
    await driver.get(\\"http://the-internet.herokuapp.com/login\\")
    await driver.manage().window().setRect(1440, 1177)
    await driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\")
    await driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\")
    await driver.findElement(By.css(\\"#login button\\")).click()
    assert(await driver.findElement(By.css(\\".flash.success\\")).getText() == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\")
}
"
`;

exports[`Code Export JavaScript Cypress should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  
    await driver.get(\\"https://the-internet.herokuapp.com/\\")
    await driver.findElement(By.linkText(\\"Form Authentication\\")).click()
    await driver.findElement(By.id(\\"username\\")).sendKeys(vars[\\"username\\"])
    await driver.findElement(By.id(\\"password\\")).sendKeys(vars[\\"password\\"])
    await driver.findElement(By.css(\\".fa\\")).click()
  
  
    vars[\\"username\\"] = \\"tomsmith\\"
    vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    login()
}
"
`;

exports[`Code Export JavaScript Cypress should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  async function waitForWindow(timeout = 2) {
    await driver.sleep(timeout)
    const handlesThen = vars[\\"windowHandles\\"]
    const handlesNow = await driver.getAllWindowHandles()
    if (handlesNow.length > handlesThen.length) {
      return handlesNow.find(handle => (!handlesThen.includes(handle)))
    }
    throw new Error(\\"New window did not appear before timeout\\")
  }
  
    await driver.get(\\"http://the-internet.herokuapp.com/\\")
    await driver.manage().window().setRect(1260, 1027)
    await driver.findElement(By.linkText(\\"Multiple Windows\\")).click()
    vars[\\"windowHandles\\"] = await driver.getAllWindowHandles()
    await driver.findElement(By.linkText(\\"Click Here\\")).click()
    vars[\\"win9625\\"] = await waitForWindow(2000)
    vars[\\"root\\"] = await driver.getWindowHandle()
    await driver.switchTo().window(vars[\\"win9625\\"])
    assert(await driver.getTitle() == \\"New Window\\")
    await driver.switchTo().window(vars[\\"root\\"])
    assert(await driver.getTitle() == \\"The Internet\\")
}
"
`;

exports[`Code Export JavaScript Cypress should export a test with grid execution 1`] = `
"// Generated by Selenium IDE
import { Given, When, Then } from \\"cypress-cucumber-preprocessor/steps\\";
  
    await driver.get(\\"http://the-internet.herokuapp.com/login\\")
    await driver.manage().window().setRect(1440, 1177)
    await driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\")
    await driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\")
    await driver.findElement(By.css(\\"#login button\\")).click()
    assert(await driver.findElement(By.css(\\".flash.success\\")).getText() == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\")
}
"
`;
