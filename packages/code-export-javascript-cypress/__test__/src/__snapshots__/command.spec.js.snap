// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`command code emitter should emit 'assert selected label' command 1`] = `"cy.get('#test').find(':selected').should('contain','test')"`;

exports[`command code emitter should emit 'verify selected label' command 1`] = `"cy.get('#test').find(':selected').should('contain','test')"`;

exports[`command code emitter should emit \`add selection\` command 1`] = `"cy.get('select').select('A label', { force:true })"`;

exports[`command code emitter should emit \`answer on visible prompt\` command 1`] = `undefined`;

exports[`command code emitter should emit \`assert alert\` command 1`] = `undefined`;

exports[`command code emitter should emit \`assert checked\` command 1`] = `"cy.get('#check').should('have.prop', 'checked')"`;

exports[`command code emitter should emit \`assert confirmation\` command 1`] = `undefined`;

exports[`command code emitter should emit \`assert editable\` command 1`] = `"cy.get('#text').should('be.enabled')"`;

exports[`command code emitter should emit \`assert element not present\` command 1`] = `"cy.get('#element').should('not.exist')"`;

exports[`command code emitter should emit \`assert element present\` command 1`] = `"cy.get('#element').should('exist')"`;

exports[`command code emitter should emit \`assert not checked\` command 1`] = `"cy.get('#check').should('not.have.prop', 'checked')"`;

exports[`command code emitter should emit \`assert not editable\` command 1`] = `"cy.get('#text').should('not.be.enabled')"`;

exports[`command code emitter should emit \`assert not selected value\` command 1`] = `"cy.get('#select').should('not.have.value','test')"`;

exports[`command code emitter should emit \`assert not text\` command 1`] = `"cy.get('#test').text().should('not.equal','text')"`;

exports[`command code emitter should emit \`assert prompt\` command 1`] = `undefined`;

exports[`command code emitter should emit \`assert selected value\` command 1`] = `"cy.get('#select').should('have.value','test')"`;

exports[`command code emitter should emit \`assert text\` command 1`] = `"cy.get('#test').text().should('equal','some text that should be here')"`;

exports[`command code emitter should emit \`assert title\` command 1`] = `"cy.title().should('equal','example title')"`;

exports[`command code emitter should emit \`assert value\` command 1`] = `"cy.get('#select').should('have.value','test')"`;

exports[`command code emitter should emit \`assert\` command 1`] = `"expect(vars['varrrName']).to.equal('blah')"`;

exports[`command code emitter should emit \`check\` command 1`] = `"cy.get('#f').check({ force:true })"`;

exports[`command code emitter should emit \`choose cancel on visible prompt\` command 1`] = `undefined`;

exports[`command code emitter should emit \`choose ok on visible confirmation\` command 1`] = `undefined`;

exports[`command code emitter should emit \`click at\` command 1`] = `"cy.get('a').contains('button').click({ force:true })"`;

exports[`command code emitter should emit \`click\` command 1`] = `"cy.get('a').contains('button').click({ force:true })"`;

exports[`command code emitter should emit \`close\` command 1`] = `undefined`;

exports[`command code emitter should emit \`do\` command 1`] = `
Object {
  "body": undefined,
}
`;

exports[`command code emitter should emit \`double click at\` command 1`] = `"cy.get('a').contains('button').dblclick({ force:true })"`;

exports[`command code emitter should emit \`double click\` command 1`] = `"cy.get('a').contains('button').dblclick({ force:true })"`;

exports[`command code emitter should emit \`drag and drop to object\` command 1`] = `
"{
    cy.get('a').contains('dragged').trigger('dragstart')
    cy.get('a').contains('dropped').trigger('drop')
}"
`;

exports[`command code emitter should emit \`echo\` command 1`] = `"cy.log(\\"blah\\")"`;

exports[`command code emitter should emit \`echo\` command with variables 1`] = `"cy.log(vars[\\"blah\\"])"`;

exports[`command code emitter should emit \`edit content\` command 1`] = `
"
    cy.get('#contentEditable').then($element => { $element.innerText = '<button>test</button>' }\\""
`;

exports[`command code emitter should emit \`else if\` command 1`] = `
Object {
  "body": undefined,
}
`;

exports[`command code emitter should emit \`else\` command 1`] = `
Object {
  "body": undefined,
}
`;

exports[`command code emitter should emit \`end\` command 1`] = `
Object {
  "body": undefined,
}
`;

exports[`command code emitter should emit \`execute async script\` command 1`] = `undefined`;

exports[`command code emitter should emit \`execute script\` command 1`] = `undefined`;

exports[`command code emitter should emit \`execute script\` command with return string value 1`] = `undefined`;

exports[`command code emitter should emit \`forEach\` command 1`] = `
Object {
  "body": undefined,
}
`;

exports[`command code emitter should emit \`if\` command 1`] = `
Object {
  "body": undefined,
}
`;

exports[`command code emitter should emit \`mouse down at\` event 1`] = `"cy.get('#button').trigger('mousedown')"`;

exports[`command code emitter should emit \`mouse down\` command 1`] = `"cy.get('#button').trigger('mousedown')"`;

exports[`command code emitter should emit \`mouse move at\` event 1`] = `"cy.get('#button').trigger('mousemove')"`;

exports[`command code emitter should emit \`mouse out\` event 1`] = `
"
    cy.get('#button').trigger('mouseleave')"
`;

exports[`command code emitter should emit \`mouse over\` event 1`] = `"cy.get('#button').trigger('mousemove')"`;

exports[`command code emitter should emit \`mouse up at\` event 1`] = `"cy.get('#button').trigger('mouseup')"`;

exports[`command code emitter should emit \`mouse up\` event 1`] = `"cy.get('#button').trigger('mouseup')"`;

exports[`command code emitter should emit \`open\` with absolute url 1`] = `"cy.visit(\\"https://www.seleniumhq.org/\\")"`;

exports[`command code emitter should emit \`pause\` command 1`] = `"cy.wait(300)"`;

exports[`command code emitter should emit \`remove selection\` command 1`] = `"cy.get('select').select('A label', { force:true })"`;

exports[`command code emitter should emit \`repeatIf\` command 1`] = `undefined`;

exports[`command code emitter should emit \`run script\` command 1`] = `undefined`;

exports[`command code emitter should emit \`run\` command 1`] = `"some-test-case()"`;

exports[`command code emitter should emit \`select frame\` to select the top frame 1`] = `undefined`;

exports[`command code emitter should emit \`select\` command 1`] = `"cy.get('select').select('A label', { force:true })"`;

exports[`command code emitter should emit \`send keys\` command 1`] = `
"cy.get('#input').clear({ force:true })
cy.get('#input').type(\\"example input\\", { force:true })"
`;

exports[`command code emitter should emit \`send keys\` command with a key press 1`] = `
"cy.get('#input').clear({ force:true })
cy.get('#input').type(\\"SuperSecretPassword!\\", Key.ENTER, { force:true })"
`;

exports[`command code emitter should emit \`send keys\` command with a variable input 1`] = `
"cy.get('#input').clear({ force:true })
cy.get('#input').type(vars[\\"blah\\"], { force:true })"
`;

exports[`command code emitter should emit \`set speed\` 1`] = `undefined`;

exports[`command code emitter should emit \`setWindowSize\` 1`] = `"cy.viewport(1440, 1177)"`;

exports[`command code emitter should emit \`store attribute\` command 1`] = `
"cy.xpath('button[3]').its('id').then(value => {
    vars[\\"myVar\\"] = value
}"
`;

exports[`command code emitter should emit \`store json\` command 1`] = `"vars[\\"myVar\\"] = JSON.parse('[{\\"a\\":0}]')"`;

exports[`command code emitter should emit \`store text\` command 1`] = `
"cy.get('#someElement').text().then(text => {
    vars[\\"myVar\\"] = text
}"
`;

exports[`command code emitter should emit \`store title\` command 1`] = `
"cy.title().then(title => {
    vars[\\"myVar\\"] = title
}"
`;

exports[`command code emitter should emit \`store value\` command 1`] = `
"cy.get('#someElement').its('value').then(value => {
    vars[\\"myVar\\"] = value
}"
`;

exports[`command code emitter should emit \`store window handle\` command 1`] = `undefined`;

exports[`command code emitter should emit \`store xpath count\` command 1`] = `
"cy.xpath('button').its('length').then(count => {
    vars[\\"myVar\\"] = count
}"
`;

exports[`command code emitter should emit \`store\` command 1`] = `"vars[\\"myVar\\"] = \\"some value\\""`;

exports[`command code emitter should emit \`submit\` command 1`] = `"cy.get('#form').submit({ force:true })"`;

exports[`command code emitter should emit \`times\` command 1`] = `undefined`;

exports[`command code emitter should emit \`type\` command 1`] = `
"cy.get('#input').clear({ force:true })
cy.get('#input').type(\\"example input\\", { force:true })"
`;

exports[`command code emitter should emit \`uncheck\` command 1`] = `"cy.get('#f').uncheck({ force:true })"`;

exports[`command code emitter should emit \`verify checked\` command 1`] = `"cy.get('#check').should('have.prop', 'checked')"`;

exports[`command code emitter should emit \`verify editable\` command 1`] = `"cy.get('#text').should('be.enabled')"`;

exports[`command code emitter should emit \`verify element not present\` command 1`] = `"cy.get('#element').should('not.exist')"`;

exports[`command code emitter should emit \`verify element present\` command 1`] = `"cy.get('#element').should('exist')"`;

exports[`command code emitter should emit \`verify not checked\` command 1`] = `"cy.get('#check').should('not.have.prop', 'checked')"`;

exports[`command code emitter should emit \`verify not editable\` command 1`] = `"cy.get('#text').should('not.be.enabled')"`;

exports[`command code emitter should emit \`verify not selected value\` command 1`] = `"cy.get('#select').should('not.have.value','test')"`;

exports[`command code emitter should emit \`verify not text\` command 1`] = `"cy.get('#test').text().should('not.equal','text')"`;

exports[`command code emitter should emit \`verify selected value\` command 1`] = `"cy.get('#select').should('have.value','test')"`;

exports[`command code emitter should emit \`verify text\` command 1`] = `"cy.get('#test').text().should('equal','some text that should be here')"`;

exports[`command code emitter should emit \`verify title\` command 1`] = `"cy.title().should('equal','example title')"`;

exports[`command code emitter should emit \`verify value\` command 1`] = `"cy.get('#select').should('have.value','test')"`;

exports[`command code emitter should emit \`verify\` command 1`] = `"expect(vars['varrrName']).to.equal('blah')"`;

exports[`command code emitter should emit \`waitForElementEditable\` command 1`] = `"cy.get('#blah').should('be.enabled')"`;

exports[`command code emitter should emit \`waitForElementNotEditable\` command 1`] = `"cy.get('#blah').should('not.be.enabled')"`;

exports[`command code emitter should emit \`waitForElementNotPresent\` command 1`] = `"cy.get('#blah').should('not.exist')"`;

exports[`command code emitter should emit \`waitForElementNotVisible\` command 1`] = `"cy.get('#blah').should('not.be.visible')"`;

exports[`command code emitter should emit \`waitForElementPresent\` command 1`] = `"cy.get('#blah').should('exist')"`;

exports[`command code emitter should emit \`waitForElementVisible\` command 1`] = `"cy.get('#blah').should('be.visible')"`;

exports[`command code emitter should emit \`waitForText\` command 1`] = `"cy.get('#blah').text().should('equal','text')"`;

exports[`command code emitter should emit \`when\` command 1`] = `
"})

When(\`I do something\`, () => {"
`;

exports[`command code emitter should emit \`while\` command 1`] = `undefined`;

exports[`command code emitter should emit new window handling, if command opens a new window 1`] = `undefined`;
